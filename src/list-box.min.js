class Listbox{constructor(node){this.node=node,this.onSelected=null,this.registenerEvents(),this.currentIndex=this.getSelectedOptionIndex()}registenerEvents(){this.node.addEventListener("keydown",(event=>this.handleKeydown(event))),this.node.addEventListener("click",(event=>this.handleClick(event)))}focusNext(){const lastIndex=this.getOptions().length-1;this.currentIndex<lastIndex&&this.focus(this.currentIndex+1)}focusPrevious(){this.currentIndex>0&&this.focus(this.currentIndex-1)}isValidIndex(index,length){return index>=0&&index<length}focus(index){const options=this.getOptions();if(!this.isValidIndex(index,options.length))return;const currentOption=this.getSelectedOption();currentOption&&currentOption.removeAttribute("aria-selected");const newOption=options[index];newOption.setAttribute("aria-selected","true"),this.node.setAttribute("aria-activedescendant",newOption.id),this.currentIndex=index}clearSelectedOption(){const selectedOption=this.getSelectedOption();null!==selectedOption&&(selectedOption.removeAttribute("aria-selected"),this.node.removeAttribute("aria-activedescendant"),this.currentIndex=-1)}getOptions(){const options=this.node.querySelectorAll('[role="option"]');return Array.from(options)}getSelectedOptionIndex(){return this.getOptions().findIndex((option=>"true"===option.getAttribute("aria-selected")))}getOption(index){const options=this.getOptions();return index<0||index>=options.length?null:options[index]}getSelectedOption(){return this.getOption(this.currentIndex)}handleClick(event){const options=this.getOptions(),index=options.findIndex((option=>option===event.target));index<0||(this.focus(index),"function"==typeof this.onSelected&&this.onSelected(options[index]))}handleKeydown(event){const{key:key}=event,keyHandlers={ArrowRight:thisValue=>thisValue.focusNext(),ArrowLeft:thisValue=>thisValue.focusPrevious(),Home:thisValue=>thisValue.focus(0),End:thisValue=>thisValue.focus(thisValue.options.length-1)};key in keyHandlers?(event.preventDefault(),keyHandlers[event.key](this)):this.tryWithKey(event)}tryWithKey(event){const{key:key}=event,regex=new RegExp(`^${key}`,"i"),index=this.getOptions().findIndex((option=>regex.test(option.textContent)));index>=0&&(event.preventDefault(),this.focus(index))}}export default Listbox;