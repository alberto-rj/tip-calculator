class DataStore{constructor(){this.map={}}set(key,value){this.map[key]=value}get(key){return this.map[key]}getAll(){return this.map}isSet(){for(let key in this.map)if(null===this.map[key])return!1;return!0}hasSetKey(){for(let key in this.map)if(null!==this.map[key])return!0;return!1}hasEmptyKey(){for(let key in this.map)if(null===this.map[key])return!0;return!1}keyExists(key){return key in this.map}keySet(key){return key in this.map&&null!==this.map[key]}keySetCount(){let count=0;for(let key in this.map)null!==this.map[key]&&count++;return count}keyEmpty(key){return!(key in this.map)||null===this.map[key]}isEmpty(){let i=0;for(let key in this.map)i++;return 0===i}size(){let i=0;for(let key in this.map)i++;return i}compareTo(store){return store&&store instanceof DataStore?this.size()-store.size():0}equals(store){if(!(store instanceof DataStore))return!1;if(this.size()!==store.size())return!1;const thisMap=this.map,storeMap=store.map;for(let thisKey in thisMap)if(thisMap[thisKey]!==storeMap[thisKey])return!1;return!0}clone(){let newStore=new DataStore;for(let key in this.map)newStore.map[key]=this.map[key];return newStore}reset(){for(let key in this.map)this.map[key]=null}}export default DataStore;